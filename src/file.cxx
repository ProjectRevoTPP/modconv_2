#include <filesystem>
#include "common.hxx"

/* These includes aren't needed anymore due to the shift to C++17. */
/*
#ifdef _WIN32
#include <direct.h>
#else
#include <sys/stat.h>
#endif
*/

#include "../deps/lodepng.h"

/*
 * Easily accessible functions to accomplish the following tasks:
 * 1.) Reset a file (Creating is done on a per file basis with fstreams)
 * 2.) Create and reset a directory
 * 3.) Get PNG information
 * 4.) Remove filename from path
 */

/**
 * Uses fstreams to reset a plaintext file.
 * Note: Adds the obsidian signature to line 1.
 */
void reset_file(const std::string &fileOut)
{
    std::fstream file;
    file.open(fileOut, std::ios::out);
    file << "# Generated by obsidian" << std::endl;
    file.close();
}

/** Deletes a directory and creates it again. */
void reset_directory(const std::string &output)
{
    std::filesystem::remove_all(output);
    std::filesystem::create_directory(output);
}

/** Uses LodePNG to get dimensions from a PNG image. */
int get_dimension(int mode, const std::string &path)
{
    unsigned int w, h;
    std::vector<unsigned char> buffer;
    std::vector<unsigned char> image;
    lodepng::load_file(buffer, path);
    lodepng::State state;
    lodepng::decode(image, w, h, state, buffer);

    if (!mode) return w;
    else return h;
}

/** Easy way to get a path leading to the directory only */
std::string get_path(const std::string &path)
{
    return std::filesystem::path(path).remove_filename();
}

/** Checks if a exists (including directories) */
bool file_exists(const std::string &path)
{
    return std::filesystem::exists(path);
}

/** Checks if path provided is a directory */
bool is_directory(const std::string &path)
{
    return std::filesystem::is_directory(path);
}

/** Returns the filename only */
std::string get_filename(const std::string &path)
{
    return fs::path(path).filename();
}
